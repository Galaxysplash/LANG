# pragma once


#include <initializer_list>
#include <string>

#include "framework/code.h"

struct program {
    static void start(
      int argc,
      const char** argv,
      code& code_ref
    );

    ///Runs the code.
    static void analyze_and_exec(
        bool in_terminal,
        const code& code_in,
        const std::string_view& EXIT_INSTRUCTION,
        const std::string_view& HELP_INSTRUCTION
    );

    ///Pulls the code from the file and formats it.
    static void get_code(
        int argc, const char **argv, code &ret
    );

    ///Analyzes the code and builds an abstract syntax tree.
    static void analyze_code(
        const code &code_in,
        const std::initializer_list<std::string_view> &&ops_priority,
        bool in_terminal,
        const std::string_view& EXIT_INSTRUCTION
    );

    ///Executes the abstract syntax tree, generated by 'analyze_code(...)'.
    static void exec_absract_syntax_tree();

    static void check_for_one_word_instruction
    (
        const code &code_in,
        const std::string_view &instruction_in
    );

    static void try_add_variables(
        const code& instructions,
        bool in_terminal
    );

    static void exec_basic_instructions(
        const code& instructions,
        bool in_terminal,
        const std::string_view& EXIT_INSTRUCTION,
        const std::string_view& HELP_INSTRUCTION
    );
};